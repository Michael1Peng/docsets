This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
4. Repository files, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

<additional_info>

</additional_info>

</file_summary>

<directory_structure>
guide/code-compress.md
guide/command-line-options.md
guide/comment-removal.md
guide/configuration.md
guide/custom-instructions.md
guide/development/index.md
guide/development/setup.md
guide/development/using-repomix-as-a-library.md
guide/index.md
guide/installation.md
guide/mcp-server.md
guide/output.md
guide/prompt-examples.md
guide/remote-repository-processing.md
guide/security.md
guide/tips/best-practices.md
guide/usage.md
index.md
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="guide/code-compress.md">
# 代码压缩
代码压缩是一个强大的功能，它能够在移除实现细节的同时智能提取关键代码结构。在需要减少令牌数量的同时保持代码库的重要结构信息时，这个功能特别有用。

> [!NOTE]
> 这是一个实验性功能，我们将根据用户反馈和实际使用情况积极改进。

## 基本用法

使用 `--compress` 标志启用代码压缩：

```bash
repomix --compress
```

也可以在远程仓库中使用：

```bash
repomix --remote user/repo --compress
```

## 工作原理

压缩算法使用 Tree-sitter 解析处理代码，提取并保留基本结构元素，同时移除实现细节。

压缩会保留：
- 函数和方法签名
- 接口和类型定义
- 类结构和属性
- 重要的结构元素

同时会移除：
- 函数和方法实现
- 循环和条件逻辑细节
- 内部变量声明
- 具体实现代码

### 示例

原始 TypeScript 代码：

```typescript
import { ShoppingItem } from './shopping-item';

/**
 * Calculate the total price of shopping items
 */
const calculateTotal = (
  items: ShoppingItem[]
) => {
  let total = 0;
  for (const item of items) {
    total += item.price * item.quantity;
  }
  return total;
}

// Shopping item interface
interface Item {
  name: string;
  price: number;
  quantity: number;
}
```

压缩后：

```typescript
import { ShoppingItem } from './shopping-item';
⋮----
/**
 * Calculate the total price of shopping items
 */
const calculateTotal = (
  items: ShoppingItem[]
) => {
⋮----
// Shopping item interface
interface Item {
  name: string;
  price: number;
  quantity: number;
}
```

## 配置

你可以在配置文件中启用压缩：

```json
{
  "output": {
    "compress": true
  }
}
```

## 使用场景

代码压缩在以下情况特别有用：
- 分析代码结构和架构
- 减少用于 LLM 处理的令牌数量
- 创建高层次文档
- 理解代码模式和签名
- 共享 API 和接口设计

## 相关选项

你可以将压缩与其他选项结合使用：
- `--remove-comments`: 移除代码注释
- `--remove-empty-lines`: 移除空行
- `--output-show-line-numbers`: 在输出中添加行号
</file>

<file path="guide/command-line-options.md">
# 命令行选项

## 基本选项
- `-v, --version`: 显示版本

## 输出选项
- `-o, --output <file>`: 输出文件名（默认：`repomix-output.txt`）
- `--style <type>`: 输出样式（`plain`、`xml`、`markdown`）（默认：`xml`）
- `--parsable-style`: 启用基于所选样式模式的可解析输出（默认：`false`）
- `--compress`: 执行智能代码提取，专注于函数和类的签名，同时删除实现细节。有关详细信息和示例，请参阅[代码压缩指南](code-compress)。
- `--output-show-line-numbers`: 添加行号（默认：`false`）
- `--copy`: 复制到剪贴板（默认：`false`）
- `--no-file-summary`: 禁用文件摘要（默认：`true`）
- `--no-directory-structure`: 禁用目录结构（默认：`true`）
- `--no-files`: 禁用文件内容输出（仅元数据模式）（默认：`true`）
- `--remove-comments`: 移除注释（默认：`false`）
- `--remove-empty-lines`: 移除空行（默认：`false`）
- `--header-text <text>`: 文件头部包含的自定义文本
- `--instruction-file-path <path>`: 包含详细自定义指令的文件路径
- `--include-empty-directories`: 在输出中包含空目录（默认：`false`）

## 过滤选项
- `--include <patterns>`: 包含模式（逗号分隔）
- `-i, --ignore <patterns>`: 忽略模式（逗号分隔）
- `--no-gitignore`: 禁用 .gitignore 文件
- `--no-default-patterns`: 禁用默认模式

## 远程仓库选项
- `--remote <url>`: 处理远程仓库
- `--remote-branch <name>`: 指定远程分支名称、标签或提交哈希（默认为仓库的默认分支）

## 配置选项
- `-c, --config <path>`: 自定义配置文件路径
- `--init`: 创建配置文件
- `--global`: 使用全局配置

## 安全选项
- `--no-security-check`: 禁用安全检查（默认：`true`）

## 令牌计数选项
- `--token-count-encoding <encoding>`: 指定令牌计数编码（如 `o200k_base`、`cl100k_base`）（默认：`o200k_base`）

## 其他选项
- `--top-files-len <number>`: 显示的顶部文件数量（默认：`5`）
- `--verbose`: 启用详细日志
- `--quiet`: 禁止所有标准输出

## 示例

```bash
# 基本用法
repomix

# 自定义输出
repomix -o output.xml --style xml

# 使用压缩的自定义输出
repomix --compress

# 处理特定文件
repomix --include "src/**/*.ts" --ignore "**/*.test.ts"

# 带分支的远程仓库
repomix --remote https://github.com/user/repo/tree/main

# 带提交的远程仓库
repomix --remote https://github.com/user/repo/commit/836abcd7335137228ad77feb28655d85712680f1

# 使用简写的远程仓库
repomix --remote user/repo
```
</file>

<file path="guide/comment-removal.md">
# 注释移除

Repomix 可以在生成输出文件时自动移除代码中的注释。这有助于减少干扰，让代码更加简洁。

## 使用方法

要启用注释移除，在 `repomix.config.json` 中将 `removeComments` 选项设置为 `true`：

```json
{
  "output": {
    "removeComments": true
  }
}
```

## 支持的语言

Repomix 支持移除多种编程语言的注释，包括：

- JavaScript/TypeScript (`//`, `/* */`)
- Python (`#`, `"""`, `'''`)
- Java (`//`, `/* */`)
- C/C++ (`//`, `/* */`)
- HTML (`<!-- -->`)
- CSS (`/* */`)
- 以及更多语言...

## 示例

以下是 JavaScript 代码示例：

```javascript
// 这是单行注释
function test() {
  /* 这是
     多行注释 */
  return true;
}
```

启用注释移除后，输出将变为：

```javascript
function test() {
  return true;
}
```

## 注意事项

- 注释移除在其他处理步骤（如行号添加）之前执行
- 某些注释，例如 JSDoc 注释，可能会根据语言和上下文保留
- 如果你需要保留某些重要注释，请考虑使用其他方式记录这些信息，例如使用自定义指令

## 建议用法

1. **选择性使用**：
  - 对于需要向 AI 展示实现细节的代码，保留注释
  - 对于主要关注代码结构的分析，移除注释

2. **配合其他功能**：
  - 与 `--remove-empty-lines` 选项组合使用，获得更简洁的输出
  - 使用自定义指令提供额外的上下文信息

3. **性能考虑**：
  - 移除注释可以减少输出文件大小
  - 对于大型代码库特别有用
</file>

<file path="guide/configuration.md">
# 配置

## 快速开始

创建配置文件：
```bash
repomix --init
```

## 配置文件

`repomix.config.json`：
```json
{
  "output": {
    "filePath": "repomix-output.xml",
    "style": "xml",
    "parsableStyle": true,
    "compress": false,
    "headerText": "自定义头部文本",
    "instructionFilePath": "repomix-instruction.md",
    "fileSummary": true,
    "directoryStructure": true,
    "removeComments": false,
    "removeEmptyLines": false,
    "topFilesLength": 5,
    "showLineNumbers": false,
    "copyToClipboard": false,
    "includeEmptyDirectories": false,
    "git": {
      "sortByChanges": true,
      "sortByChangesMaxCommits": 100
    }
  },
  "include": ["**/*"],
  "ignore": {
    "useGitignore": true,
    "useDefaultPatterns": true,
    "customPatterns": ["tmp/", "*.log"]
  },
  "security": {
    "enableSecurityCheck": true
  }
}
```

## 全局配置

创建全局配置：
```bash
repomix --init --global
```

位置：
- Windows: `%LOCALAPPDATA%\Repomix\repomix.config.json`
- macOS/Linux: `~/.config/repomix/repomix.config.json`

## 忽略模式

优先级：
1. CLI 选项 (`--ignore`)
2. `.repomixignore`
3. `.gitignore` 和 `.git/info/exclude`
4. 默认模式

`.repomixignore` 示例：
```text
# 缓存目录
.cache/
tmp/

# 构建输出
dist/
build/

# 日志
*.log
```

## 默认忽略模式

默认包含的常见模式：
```text
node_modules/**
.git/**
coverage/**
dist/**
```

完整列表：[defaultIgnore.ts](https://github.com/yamadashy/repomix/blob/main/src/config/defaultIgnore.ts)

## 示例

### 代码压缩

当 `output.compress` 设置为 `true` 时，Repomix 将提取基本代码结构，同时移除实现细节。这可以在保持重要的结构信息的同时减少令牌数量。

更多详细信息和示例，请参阅[代码压缩指南](code-compress)。

### Git 集成

`output.git` 配置允许您控制如何基于 Git 历史记录对文件进行排序：

- `sortByChanges`：当设置为 `true` 时，文件将按 Git 更改次数（修改该文件的提交数）进行排序。更改次数较多的文件将出现在输出的底部。这有助于优先处理更活跃开发的文件。默认值：`true`
- `sortByChangesMaxCommits`：计算文件更改次数时要分析的最大提交数。默认值：`100`

配置示例：
```json
{
  "output": {
    "git": {
      "sortByChanges": true,
      "sortByChangesMaxCommits": 100
    }
  }
}
```

### 注释移除

当 `output.removeComments` 设置为 `true` 时，将从支持的文件类型中移除注释，以减少输出大小并专注于核心代码内容。

有关支持的语言和详细示例，请参阅[注释移除指南](comment-removal)。
</file>

<file path="guide/custom-instructions.md">
# 自定义指令

Repomix 允许你提供自定义指令，这些指令将被包含在输出文件中。这对于为处理代码库的 AI 系统提供上下文或特定指导非常有用。

## 使用方法

要包含自定义指令，请在仓库根目录创建一个 markdown 文件（例如 `repomix-instruction.md`）。然后，在 `repomix.config.json` 中指定该文件的路径：

```json
{
  "output": {
    "instructionFilePath": "repomix-instruction.md"
  }
}
```

该文件的内容将在输出中的"Instruction"部分中显示。

## 示例

```markdown
# 仓库指令

这个仓库包含了 Repomix 工具的源代码。在分析代码时请遵循以下指导原则：

1. 重点关注 `src/core` 目录中的核心功能
2. 特别注意 `src/core/security` 中的安全检查
3. 忽略 `tests` 目录中的文件

## 代码规范
- 遵循 TypeScript 最佳实践
- 确保所有公共 API 都有适当的文档
- 使用依赖注入模式以便于测试

## 安全考虑
- 确保所有用户输入都经过适当验证
- 避免在日志中记录敏感信息
- 使用安全的依赖版本
```

这将在输出中生成以下部分：

```xml
<instruction>
# 仓库指令

这个仓库包含了 Repomix 工具的源代码。在分析代码时请遵循以下指导原则：

1. 重点关注 `src/core` 目录中的核心功能
2. 特别注意 `src/core/security` 中的安全检查
3. 忽略 `tests` 目录中的文件

## 代码规范
- 遵循 TypeScript 最佳实践
- 确保所有公共 API 都有适当的文档
- 使用依赖注入模式以便于测试

## 安全考虑
- 确保所有用户输入都经过适当验证
- 避免在日志中记录敏感信息
- 使用安全的依赖版本
</instruction>
```

## 最佳实践

1. **保持简洁明确**：指令应该简短但详细
2. **提供具体示例**：在适当的情况下添加代码示例
3. **设置优先级**：将最重要的指令放在前面
4. **包含上下文**：提供项目背景和重要考虑因素
5. **结构化内容**：使用标题和列表使指令易于阅读

## 注意事项

- 避免在指令中包含敏感信息
- 定期更新指令以反映项目的变化
- 确保指令与项目的其他文档保持一致
- 使用清晰的层次结构组织内容
</file>

<file path="guide/development/index.md">
# 参与 Repomix 开发

## 快速开始

```bash
git clone https://github.com/yamadashy/repomix.git
cd repomix
npm install
```

## 开发命令

```bash
# 运行 CLI
npm run repomix

# 运行测试
npm run test
npm run test-coverage

# 代码检查
npm run lint
```

## 代码风格

- 使用 [Biome](https://biomejs.dev/) 进行代码检查和格式化
- 使用依赖注入以提高可测试性
- 保持文件不超过 250 行
- 为新功能添加测试用例

## Pull Request 提交指南

1. 运行所有测试
2. 通过代码检查
3. 更新文档
4. 遵循现有代码风格

## 需要帮助？

- [提交 Issue](https://github.com/yamadashy/repomix/issues)
- [加入 Discord](https://discord.gg/wNYzTwZFku)
</file>

<file path="guide/development/setup.md">
# 开发环境搭建

## 前提条件

- Node.js ≥ 18.0.0
- Git
- npm
- pnpm（推荐）

## 本地开发

### 克隆仓库

```bash
git clone https://github.com/yamadashy/repomix.git
cd repomix
```

### 安装依赖

使用 pnpm（推荐）：
```bash
pnpm install
```

使用 npm：
```bash
npm install
```

### 启动开发服务器

```bash
# 运行 CLI
pnpm run repomix

# 启动文档网站开发服务器
pnpm run website:dev
```

## Docker 开发环境

```bash
# 构建镜像
docker build -t repomix .

# 运行容器
docker run -v ./:/app -it --rm repomix
```

## 项目结构

```text
.
├── src/                # 源代码
│   ├── cli/           # CLI 实现
│   ├── config/        # 配置处理
│   ├── core/          # 核心功能
│   └── shared/        # 共享工具
├── tests/             # 测试文件
├── website/           # 文档网站
└── package.json       # 项目依赖
```

## 测试

```bash
# 运行所有测试
pnpm run test

# 生成测试覆盖率报告
pnpm run test:coverage

# 运行特定测试
pnpm run test -- tests/cli
```

## 代码质量

```bash
# 运行代码检查
pnpm run lint

# 自动修复代码问题
pnpm run lint:fix

# 类型检查
pnpm run typecheck
```

## 文档

文档位于 `website/` 目录。要在本地开发文档网站：

```bash
# 启动开发服务器
pnpm run website:dev

# 构建生产版本
pnpm run website:build
```

## 故障排除

### 常见问题

1. **Node.js 版本**
  - 确保使用 Node.js ≥ 18.0.0
  - 使用 `node --version` 检查版本

2. **依赖问题**
  - 删除 `node_modules` 和锁定文件
  - 重新运行 `pnpm install`

3. **构建错误**
  - 运行 `pnpm run clean`
  - 重新构建项目 `pnpm run build`

### 支持

如果遇到问题：
- 创建 [GitHub Issue](https://github.com/yamadashy/repomix/issues)
- 加入我们的 [Discord 服务器](https://discord.gg/wNYzTwZFku)
</file>

<file path="guide/development/using-repomix-as-a-library.md">
# 作为库使用 Repomix

除了作为 CLI 工具使用 Repomix 外，您还可以将其功能直接集成到 Node.js 应用程序中。

## 安装

在您的项目中安装 Repomix 作为依赖项：

```bash
npm install repomix
```

## 基本用法

使用 Repomix 最简单的方法是通过 `runCli` 函数，它提供与命令行界面相同的功能：

```javascript
import { runCli, type CliOptions } from 'repomix';

// 使用自定义选项处理当前目录
async function packProject() {
  const options = {
    output: 'output.xml',
    style: 'xml',
    compress: true,
    quiet: true
  } as CliOptions;
  
  const result = await runCli(['.'], process.cwd(), options);
  return result.packResult;
}
```

`result.packResult` 包含有关处理文件的信息，包括：
- `totalFiles`：处理的文件数量
- `totalCharacters`：总字符数
- `totalTokens`：总令牌数（对 LLM 上下文限制有用）
- `fileCharCounts`：每个文件的字符数
- `fileTokenCounts`：每个文件的令牌数

## 处理远程仓库

您可以克隆并处理远程仓库：

```javascript
import { runCli, type CliOptions } from 'repomix';

// 克隆并处理 GitHub 仓库
async function processRemoteRepo(repoUrl) {
  const options = {
    remote: repoUrl,
    output: 'output.xml',
    compress: true
  } as CliOptions;
  
  return await runCli(['.'], process.cwd(), options);
}
```

## 使用核心组件

要获得更多控制，您可以直接使用 Repomix 的低级 API：

```javascript
import { searchFiles, collectFiles, processFiles, TokenCounter } from 'repomix';

async function analyzeFiles(directory) {
  // 查找并收集文件
  const { filePaths } = await searchFiles(directory, { /* 配置 */ });
  const rawFiles = await collectFiles(filePaths, directory);
  const processedFiles = await processFiles(rawFiles, { /* 配置 */ });
  
  // 计算令牌
  const tokenCounter = new TokenCounter('o200k_base');
  
  // 返回分析结果
  return processedFiles.map(file => ({
    path: file.path,
    tokens: tokenCounter.countTokens(file.content)
  }));
}
```

## 实际示例

Repomix 网站（[repomix.com](https://repomix.com)）使用 Repomix 作为库来处理远程仓库。您可以在 [website/server/src/remoteRepo.ts](https://github.com/yamadashy/repomix/blob/main/website/server/src/remoteRepo.ts) 中查看实现。
</file>

<file path="guide/index.md">
# Repomix 入门指南

Repomix 是一个将代码库打包成单个 AI 友好文件的工具。它专为帮助你将代码提供给大型语言模型（如 ChatGPT、DeepSeek、Perplexity、Gemini、Gemma、Llama、Grok 等）而设计。

## 快速开始

在你的项目目录中运行以下命令：

```bash
npx repomix
```

就这么简单！你会在当前目录中找到一个 `repomix-output.txt` 文件，其中包含了以 AI 友好格式整理的整个代码库。

然后，你可以将此文件发送给 AI 助手，并附上类似这样的提示：

```
这个文件包含了仓库中所有文件的合并内容。
我想重构代码，请先帮我审查一下。
```

AI 将分析你的整个代码库并提供全面的见解：

![Repomix 使用示例1](/images/docs/repomix-file-usage-1.png)

在讨论具体修改时，AI 可以帮助生成代码。通过像 Claude 的 Artifacts 这样的功能，你甚至可以一次性接收多个相互依赖的文件：

![Repomix 使用示例2](/images/docs/repomix-file-usage-2.png)

祝你编码愉快！🚀

## 核心功能

- **AI 优化**：以 AI 易于理解的格式整理代码库
- **令牌计数**：为 LLM 上下文限制提供令牌使用统计
- **Git 感知**：自动识别并遵循 `.gitignore` 和 `.git/info/exclude` 文件
- **注重安全**：使用 Secretlint 进行敏感信息检测
- **多种输出格式**：可选纯文本、XML 或 Markdown 格式

## 下一步

- [安装指南](installation.md)：了解安装 Repomix 的不同方式
- [使用指南](usage.md)：学习基本和高级功能
- [配置](configuration.md)：根据需求自定义 Repomix
- [安全功能](security.md)：了解安全检查详情

## 社区

加入我们的 [Discord 社区](https://discord.gg/wNYzTwZFku)：
- 获取 Repomix 使用帮助
- 分享你的使用经验
- 提出新功能建议
- 与其他用户交流

## 支持

发现问题或需要帮助？
- [在 GitHub 上提交问题](https://github.com/yamadashy/repomix/issues)
- 加入 Discord 服务器
- 查看[文档](https://repomix.com)
</file>

<file path="guide/installation.md">
# 安装

## 使用 npx（无需安装）

```bash
npx repomix
```

## 全局安装

### npm 安装
```bash
npm install -g repomix
```

### Yarn 安装
```bash
yarn global add repomix
```

### Homebrew 安装（macOS/Linux）
```bash
brew install repomix
```

## Docker 安装

使用 Docker 是最便捷的方式之一，可以避免环境配置问题。以下是具体步骤：

```bash
# 处理当前目录
docker run -v .:/app -it --rm ghcr.io/yamadashy/repomix

# 处理指定目录
docker run -v .:/app -it --rm ghcr.io/yamadashy/repomix path/to/directory

# 处理远程仓库
docker run -v ./output:/app -it --rm ghcr.io/yamadashy/repomix --remote yamadashy/repomix
```

## VSCode 扩展

通过社区维护的 [Repomix Runner](https://marketplace.visualstudio.com/items?itemName=DorianMassoulier.repomix-runner) 扩展，您可以直接在 VSCode 中运行 Repomix。

功能：
- 只需点击几下即可打包任何文件夹
- 可选择文件或内容模式进行复制
- 自动清理输出文件
- 支持 repomix.config.json

从 [VSCode 应用商店](https://marketplace.visualstudio.com/items?itemName=DorianMassoulier.repomix-runner)安装。

## 系统要求

- Node.js: ≥ 18.0.0
- Git: 处理远程仓库时需要

## 验证安装

安装完成后，可以通过以下命令验证 Repomix 是否正常工作：

```bash
repomix --version
repomix --help
```
</file>

<file path="guide/mcp-server.md">
# MCP服务器

Repomix 支持 [Model Context Protocol (MCP)](https://modelcontextprotocol.io)，允许 AI 助手直接与您的代码库交互。当作为 MCP 服务器运行时，Repomix 提供了工具，使 AI 助手能够在无需手动准备文件的情况下打包本地或远程仓库进行分析。

> [!NOTE]  
> 这是一个实验性功能，我们将根据用户反馈和实际使用情况积极改进

## 将 Repomix 作为 MCP 服务器运行

要将 Repomix 作为 MCP 服务器运行，请使用 `--mcp` 标志：

```bash
repomix --mcp
```

这会以 MCP 服务器模式启动 Repomix，使其可供支持 Model Context Protocol 的 AI 助手使用。

## 配置 MCP 服务器

要将 Repomix 作为 MCP 服务器与 Claude 等 AI 助手一起使用，您需要配置 MCP 设置：

### 对于 VS Code

您可以使用以下方法之一在 VS Code 中安装 Repomix MCP 服务器：

1. **使用安装徽章：**

  [![Install in VS Code](https://img.shields.io/badge/VS_Code-VS_Code?style=flat-square&label=Install%20Server&color=0098FF)](vscode:mcp/install?%7B%22name%22%3A%22repomix%22%2C%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%22repomix%22%2C%22--mcp%22%5D%7D)<br>
  [![Install in VS Code Insiders](https://img.shields.io/badge/VS_Code_Insiders-VS_Code_Insiders?style=flat-square&label=Install%20Server&color=24bfa5)](vscode-insiders:mcp/install?%7B%22name%22%3A%22repomix%22%2C%22command%22%3A%22npx%22%2C%22args%22%3A%5B%22-y%22%2C%22repomix%22%2C%22--mcp%22%5D%7D)

2. **使用命令行：**

  ```bash
  code --add-mcp '{"name":"repomix","command":"npx","args":["-y","repomix","--mcp"]}'
  ```

  对于 VS Code Insiders：
  ```bash
  code-insiders --add-mcp '{"name":"repomix","command":"npx","args":["-y","repomix","--mcp"]}'
  ```

### 对于 Cline（VS Code 扩展）

编辑 `cline_mcp_settings.json` 文件：

```json
{
  "mcpServers": {
    "repomix": {
      "command": "npx",
      "args": [
        "-y",
        "repomix",
        "--mcp"
      ]
    }
  }
}
```

### 对于 Cursor

在 Cursor 中，从 `Cursor Settings` > `MCP` > `+ Add new global MCP server` 添加一个新的 MCP 服务器，配置与 Cline 类似。

### 对于 Claude Desktop

使用与 Cline 类似的配置编辑 `claude_desktop_config.json` 文件。

## 可用的 MCP 工具

当作为 MCP 服务器运行时，Repomix 提供以下工具：

### pack_codebase

此工具将本地代码目录打包成一个用于 AI 分析的整合文件。

**参数：**
- `directory`：（必需）要打包的目录的绝对路径
- `compress`：（可选，默认值：true）是否执行智能代码提取以减少令牌计数
- `includePatterns`：（可选）以逗号分隔的包含模式列表
- `ignorePatterns`：（可选）以逗号分隔的忽略模式列表

**示例：**
```json
{
  "directory": "/path/to/your/project",
  "compress": true,
  "includePatterns": "src/**/*.ts,**/*.md",
  "ignorePatterns": "**/*.log,tmp/"
}
```

### pack_remote_repository

此工具获取、克隆并将 GitHub 仓库打包成一个用于 AI 分析的整合文件。

**参数：**
- `remote`：（必需）GitHub 仓库 URL 或用户/仓库格式（例如，yamadashy/repomix）
- `compress`：（可选，默认值：true）是否执行智能代码提取以减少令牌计数
- `includePatterns`：（可选）以逗号分隔的包含模式列表
- `ignorePatterns`：（可选）以逗号分隔的忽略模式列表

**示例：**
```json
{
  "remote": "yamadashy/repomix",
  "compress": true,
  "includePatterns": "src/**/*.ts,**/*.md",
  "ignorePatterns": "**/*.log,tmp/"
}
```

### read_repomix_output

此工具在无法直接访问文件的环境中读取Repomix输出文件的内容。

**参数：**
- `outputId`：（必需）要读取的Repomix输出文件的ID

**功能：**
- 专为基于Web的环境或沙箱应用程序设计
- 使用其ID检索先前生成的输出内容
- 无需文件系统访问权限即可安全访问打包的代码库

**示例：**
```json
{
  "outputId": "8f7d3b1e2a9c6054"
}
```

### file_system_read_file 和 file_system_read_directory

Repomix的MCP服务器提供了两个文件系统工具，允许AI助手安全地与本地文件系统交互：

1. `file_system_read_file`
  - 使用绝对路径读取文件内容
  - 使用[Secretlint](https://github.com/secretlint/secretlint)实现安全验证
  - 防止访问包含敏感信息的文件
  - 对无效路径和安全问题返回清晰的错误消息

2. `file_system_read_directory`
  - 使用绝对路径列出目录内容
  - 使用清晰的指示符（`[FILE]`或`[DIR]`）显示文件和目录
  - 提供安全的目录遍历和适当的错误处理
  - 验证路径并确保使用绝对路径

这两个工具都包含了强大的安全措施：
- 绝对路径验证以防止目录遍历攻击
- 权限检查以确保适当的访问权限
- 与Secretlint集成以检测敏感信息
- 清晰的错误消息以便于调试和安全意识

**示例：**
```typescript
// 读取文件
const fileContent = await tools.file_system_read_file({
  path: '/absolute/path/to/file.txt'
});

// 列出目录内容
const dirContent = await tools.file_system_read_directory({
  path: '/absolute/path/to/directory'
});
```

这些工具在AI助手需要执行以下操作时特别有用：
- 分析代码库中的特定文件
- 导航目录结构
- 验证文件存在性和可访问性
- 确保安全的文件系统操作

## 将 Repomix 作为 MCP 服务器使用的好处

将 Repomix 作为 MCP 服务器使用提供了几个优势：

1. **直接集成**：AI 助手可以直接分析您的代码库，无需手动文件准备。
2. **高效工作流**：通过消除手动生成和上传文件的需求，简化了代码分析过程。
3. **一致输出**：确保 AI 助手以一致、优化的格式接收代码库。
4. **高级功能**：利用 Repomix 的所有功能，如代码压缩、令牌计数和安全检查。

配置完成后，您的 AI 助手可以直接使用 Repomix 的功能来分析代码库，使代码分析工作流更加高效。
</file>

<file path="guide/output.md">
# 输出格式

Repomix 支持三种输出格式：
- XML（默认）
- Markdown
- 纯文本

## XML 格式

```bash
repomix --style xml
```

XML 格式针对 AI 处理进行了优化：

```xml
本文件是整个代码库的合并表示形式...

<file_summary>
（元数据和 AI 指令）
</file_summary>

<directory_structure>
src/
  index.ts
  utils/
    helper.ts
</directory_structure>

<files>
<file path="src/index.ts">
// 文件内容
</file>
</files>
```

::: tip 为什么选择 XML？
XML 标签有助于像 Claude 这样的 AI 模型更准确地解析内容。[Claude 官方文档](https://docs.anthropic.com/en/docs/build-with-claude/prompt-engineering/use-xml-tags)推荐使用 XML 标签来构建结构化提示。
:::

## Markdown 格式

```bash
repomix --style markdown
```

Markdown 提供了易读的格式：

```markdown
本文件是整个代码库的合并表示形式...

# 文件概要
（元数据和 AI 指令）

# 目录结构
```
src/
index.ts
utils/
helper.ts
```

# 文件

## File: src/index.ts
```typescript
// 文件内容
```
```

## 在 AI 模型中的使用

每种格式都能在 AI 模型中正常工作，但需要考虑以下几点：
- 对 Claude 使用 XML（解析最准确）
- 对一般可读性使用 Markdown
- 对简单性和通用兼容性使用纯文本

## 自定义设置

在 `repomix.config.json` 中设置默认格式：
```json
{
  "output": {
    "style": "xml",
    "filePath": "output.xml"
  }
}
```

## 纯文本格式

```bash
repomix --style plain
```

输出结构：
```text
本文件是整个代码库的合并表示形式...

================
文件概要
================
（元数据和 AI 指令）

================
目录结构
================
src/
  index.ts
  utils/
    helper.ts

================
文件
================

================
File: src/index.ts
================
// 文件内容
```
</file>

<file path="guide/prompt-examples.md">
# 提示示例

## 代码评审

### 架构评审
```
分析此代码库的架构：
1. 评估整体结构和模式
2. 识别潜在的架构问题
3. 提出改进可扩展性的建议
4. 标注遵循最佳实践的部分

重点关注可维护性和模块化。
```

### 安全性评审
```
对此代码库进行安全性评审：
1. 识别潜在的安全漏洞
2. 检查常见的安全反模式
3. 评审错误处理和输入验证
4. 评估依赖项的安全性

请提供具体示例和修复步骤。
```

### 性能评审
```
从性能角度评审代码库：
1. 识别性能瓶颈
2. 检查资源使用情况
3. 评审算法效率
4. 评估缓存策略

包含具体的优化建议。
```

## 文档生成

### API 文档
```
生成全面的 API 文档：
1. 列出并描述所有公共端点
2. 记录请求/响应格式
3. 包含使用示例
4. 说明限制和约束
```

### 开发者指南
```
创建包含以下内容的开发者指南：
1. 环境搭建说明
2. 项目结构概览
3. 开发工作流程
4. 测试方法
5. 常见问题排查步骤
```

### 架构文档
```
记录系统架构：
1. 高层概述
2. 组件交互
3. 数据流程图
4. 设计决策及理由
5. 系统限制和约束
```

## 分析与改进

### 依赖项分析
```
分析项目依赖：
1. 识别过时的包
2. 检查安全漏洞
3. 建议替代包
4. 评审依赖使用模式

包含具体的升级建议。
```

### 测试覆盖率
```
评审测试覆盖率：
1. 识别未测试的组件
2. 建议额外的测试用例
3. 评审测试质量
4. 推荐测试策略
```

### 代码质量
```
评估代码质量并提出改进建议：
1. 评审命名规范
2. 检查代码组织
3. 评估错误处理
4. 评审注释实践

提供具体的良好和问题模式示例。
```

## 获得更好结果的技巧

1. **明确具体**：包含清晰的目标和评估标准
2. **设置上下文**：说明你的角色和所需的专业水平
3. **请求格式**：定义期望的响应结构
4. **设置优先级**：指出哪些方面最重要

## 模型特定说明

### Claude
- 使用 XML 输出格式
- 将重要指令放在最后
- 指定响应结构

### ChatGPT
- 使用 Markdown 格式
- 将大型代码库分成小节
- 包含系统角色提示

### Gemini
- 适用于所有格式
- 每次请求专注于特定领域
- 使用逐步分析
</file>

<file path="guide/remote-repository-processing.md">
# 远程仓库处理

## 基本用法

处理公共仓库：
```bash
# 使用完整 URL
repomix --remote https://github.com/user/repo

# 使用 GitHub 简写
repomix --remote user/repo
```

## 分支和提交选择

```bash
# 指定分支
repomix --remote user/repo --remote-branch main

# 指定标签
repomix --remote user/repo --remote-branch v1.0.0

# 指定提交哈希
repomix --remote user/repo --remote-branch 935b695
```

## 系统要求

- 必须安装 Git
- 需要网络连接
- 需要仓库的读取权限

## 输出控制

```bash
# 自定义输出位置
repomix --remote user/repo -o custom-output.xml

# 使用 XML 格式
repomix --remote user/repo --style xml

# 移除注释
repomix --remote user/repo --remove-comments
```

## Docker 使用方法

```bash
# 在当前目录处理并输出
docker run -v .:/app -it --rm ghcr.io/yamadashy/repomix \
  --remote user/repo

# 输出到指定目录
docker run -v ./output:/app -it --rm ghcr.io/yamadashy/repomix \
  --remote user/repo
```

## 常见问题

### 访问问题
- 确保仓库是公开的
- 检查 Git 是否已安装
- 验证网络连接

### 大型仓库处理
- 使用 `--include` 选择特定路径
- 启用 `--remove-comments`
- 分开处理不同分支
</file>

<file path="guide/security.md">
# 安全性

## 安全检查功能

Repomix 使用 [Secretlint](https://github.com/secretlint/secretlint) 检测文件中的敏感信息：
- API 密钥
- 访问令牌
- 认证凭证
- 私钥
- 环境变量

## 配置

安全检查默认启用。

通过命令行禁用：
```bash
repomix --no-security-check
```

或在 `repomix.config.json` 中配置：
```json
{
  "security": {
    "enableSecurityCheck": false
  }
}
```

## 安全措施

1. **二进制文件排除**：输出中不包含二进制文件
2. **Git 感知**：遵循 `.gitignore` 模式
3. **自动检测**：扫描常见安全问题：
    - AWS 凭证
    - 数据库连接字符串
    - 认证令牌
    - 私钥

## 安全检查发现问题时

输出示例：
```bash
🔍 Security Check:
──────────────────
2 suspicious file(s) detected and excluded:
1. config/credentials.json
  - Found AWS access key
2. .env.local
  - Found database password
```

## 最佳实践

1. 分享前务必检查输出内容
2. 使用 `.repomixignore` 排除敏感路径
3. 保持安全检查功能启用
4. 从仓库中移除敏感文件

## 报告安全问题

如果发现安全漏洞，请：
1. 不要创建公开的 Issue
2. 发送邮件至：koukun0120@gmail.com
3. 或使用 [GitHub 安全公告](https://github.com/yamadashy/repomix/security/advisories/new)
</file>

<file path="guide/tips/best-practices.md">
# AI 辅助开发最佳实践：从实践经验谈起

虽然我还没有完成一个大型的 AI 辅助开发项目，但我想分享一下到目前为止从与 AI 合作开发中学到的经验。

## 基本开发方法

在与 AI 合作时，试图一次性实现所有功能可能会导致意外问题和项目停滞。因此，从核心功能开始，一步一步稳扎稳打地构建每个功能是更有效的方法。

### 现有代码的重要性

这种方法之所以有效，是因为通过核心功能的实现，你可以将你理想中的设计和编码风格具体化为实际代码。向 AI 传达项目愿景的最有效方式就是通过反映你的标准和偏好的代码本身。

从核心功能开始，确保每个功能在进入下一个功能之前都能正常工作，这样整个项目就能保持一致性，使 AI 更容易生成更合适的代码。

## 模块化方法

将代码分解成更小的模块至关重要。根据经验，将文件限制在 250 行左右的代码使得向 AI 提供清晰的指示更容易，并使试错过程更有效。虽然令牌计数会是更准确的指标，但对人类开发者来说，行数更容易判断，所以我们使用行数作为参考。

这不仅仅是关于前端、后端和数据库等大单元的分离，而是关于更精细层面的功能划分。例如，在一个功能内部，也要将验证、错误处理等具体功能分离成独立模块。

当然，大单元的分离也很重要，逐步实施模块化方法不仅让指令更清晰，也让 AI 能生成更合适的代码。这种方法不仅对 AI，对人类开发者来说也是有效的。

## 通过测试确保质量

我认为测试在 AI 辅助开发中尤为重要。测试不仅作为质量保证手段，还作为清晰展示代码意图的文档。当要求 AI 实现新功能时，现有的测试代码有效地充当了规范文档。

测试也是验证 AI 生成代码正确性的绝佳工具。例如，当让 AI 为某个模块实现新功能时，预先编写测试用例可以客观评估生成的代码是否符合预期。这与测试驱动开发（TDD）的理念高度契合，在与 AI 协作时特别有效。

## 规划与实现的平衡

在实现大规模功能之前，建议先与 AI 讨论计划。整理需求并考虑架构可以使后续实现更顺畅。先整理需求，然后在新的对话中进行实现是个好方法。

此外，AI 的输出必须经过人工审查，并在必要时进行调整。虽然 AI 输出的质量通常处于中等水平，但与从头开始编写代码相比，仍然可以提高开发速度。

## 结语

通过实践这些方法，你可以充分发挥 AI 的优势，同时构建一个连贯的、高质量的代码库。即使项目规模增长，每个部分都能保持清晰定义和易于管理的状态。
</file>

<file path="guide/usage.md">
# 基本用法

## 快速开始

打包整个仓库：
```bash
repomix
```

## 常见使用场景

### 打包指定目录
```bash
repomix path/to/directory
```

### 包含特定文件
使用 [glob 模式](https://github.com/mrmlnc/fast-glob?tab=readme-ov-file#pattern-syntax)：
```bash
repomix --include "src/**/*.ts,**/*.md"
```

### 排除文件
```bash
repomix --ignore "**/*.log,tmp/"
```

### 处理远程仓库
```bash
# 使用 GitHub URL
repomix --remote https://github.com/user/repo

# 使用简写形式
repomix --remote user/repo

# 指定分支/标签/提交
repomix --remote user/repo --remote-branch main
repomix --remote user/repo --remote-branch 935b695
```

## 输出格式

### XML（默认）
```bash
repomix --style xml
```

### Markdown
```bash
repomix --style markdown
```

### 纯文本
```bash
repomix --style plain
```

## 其他选项

### 移除注释
```bash
repomix --remove-comments
```

### 显示行号
```bash
repomix --output-show-line-numbers
```

### 复制到剪贴板
```bash
repomix --copy
```

### 禁用安全检查
```bash
repomix --no-security-check
```

## 配置

初始化配置文件：
```bash
repomix --init
```

更多详细配置选项请参阅[配置指南](/zh-cn/guide/configuration)。
</file>

<file path="index.md">
---
layout: home
title: Repomix
titleTemplate: 将代码库打包成AI友好的格式
aside: false
editLink: false

features:
  - icon: 🤖
    title: AI 优化
    details: 以 AI 易于理解和处理的方式格式化代码库。

  - icon: ⚙️
    title: Git 感知
    details: 自动识别并尊重您的 .gitignore 文件。

  - icon: 🛡️
    title: 注重安全
    details: 集成 Secretlint 进行强大的安全检查，检测并防止敏感信息的泄露。

  - icon: 📊
    title: 令牌计数
    details: 提供每个文件和整个代码库的令牌计数，便于控制 LLM 上下文限制。

---

<div class="cli-section">

## 快速开始

使用 Repomix 生成打包文件（`repomix-output.txt`）后，您可以将其发送给 AI 助手，并附上这样的提示：

```
此文件包含了仓库中所有文件的合并内容。
我想重构代码，请先帮我审查一下。
```

AI 将分析您的整个代码库并提供全面的见解：

![Repomix 使用示例1](/images/docs/repomix-file-usage-1.png)

在讨论具体修改时，AI 可以帮助生成代码。通过像 Claude 的 Artifacts 这样的功能，您甚至可以一次性接收多个相互依赖的文件：

![Repomix 使用示例2](/images/docs/repomix-file-usage-2.png)

祝您编码愉快！🚀



## 进阶使用指南

对于需要更多控制的高级用户，Repomix 通过其 CLI 界面提供了广泛的自定义选项。

### 快速上手

您可以在项目目录中无需安装即可立即尝试 Repomix：

```bash
npx repomix
```

或者全局安装以便重复使用：

```bash
# 使用 npm 安装
npm install -g repomix

# 或使用 yarn 安装
yarn global add repomix

# 或使用 Homebrew 安装（macOS/Linux）
brew install repomix

# 然后在任意项目目录中运行
repomix
```

就是这么简单！Repomix 将在您的当前目录中生成一个 `repomix-output.txt` 文件，其中包含了以 AI 友好格式整理的整个代码库。



### 基本用法

打包整个代码库：

```bash
repomix
```

打包特定目录：

```bash
repomix path/to/directory
```

使用 [glob 模式](https://github.com/mrmlnc/fast-glob?tab=readme-ov-file#pattern-syntax)打包特定文件：

```bash
repomix --include "src/**/*.ts,**/*.md"
```

排除特定文件：

```bash
repomix --ignore "**/*.log,tmp/"
```

处理远程仓库：
```bash
# 使用简写格式
npx repomix --remote yamadashy/repomix

# 使用完整 URL（支持分支和特定路径）
npx repomix --remote https://github.com/yamadashy/repomix
npx repomix --remote https://github.com/yamadashy/repomix/tree/main

# 使用提交 URL
npx repomix --remote https://github.com/yamadashy/repomix/commit/836abcd7335137228ad77feb28655d85712680f1
```

初始化配置文件（`repomix.config.json`）：

```bash
repomix --init
```

生成打包文件后，您可以将其用于 Claude、ChatGPT、Gemini 等生成式 AI 工具。

#### Docker 使用方法

您也可以使用 Docker 运行 Repomix 🐳  
如果您想在隔离环境中运行 Repomix 或更偏好使用容器，这是一个很好的选择。

基本用法（当前目录）：

```bash
docker run -v .:/app -it --rm ghcr.io/yamadashy/repomix
```

打包特定目录：
```bash
docker run -v .:/app -it --rm ghcr.io/yamadashy/repomix path/to/directory
```

处理远程仓库并输出到 `output` 目录：

```bash
docker run -v ./output:/app -it --rm ghcr.io/yamadashy/repomix --remote https://github.com/yamadashy/repomix
```

### 输出格式

选择您偏好的输出格式：

```bash
# XML 格式（默认）
repomix --style xml

# Markdown 格式
repomix --style markdown

# 纯文本格式
repomix --style plain
```

### 自定义设置

创建 `repomix.config.json` 进行持久化设置：

```json
{
  "output": {
    "style": "markdown",
    "filePath": "custom-output.md",
    "removeComments": true,
    "showLineNumbers": true,
    "topFilesLength": 10
  },
  "ignore": {
    "customPatterns": ["*.test.ts", "docs/**"]
  }
}
```

### 更多示例
::: tip
💡 查看我们的 [GitHub 仓库](https://github.com/yamadashy/repomix)获取完整文档和更多示例！
:::

</div>
</file>

</files>
